type User {
  name: String
  email: String! @unique
  hashedPassword: String
  role: String!
  sessions: [Session!] @relation
}

type Session {
  expiresAt: Time
  handle: String! @unique
  user: User
  hashedSessionToken: String
  antiCSRFToken: String
  publicData: String
  privateData: String
}

type Token {
  hashedToken: String!
  type: String!
  expiresAt: Time!
  sentTo: String!
  user: User! @relation
}

type Query {
  allUsers: [User!]
  findUserByEmail(email: String!): User @index(name: "unique_User_email")
  findSessionByHandle(handle: String!): Session @index(name: "unique_Session_handle")
  findTokenByType(type: String!): [Token!]
  findTokenByTypeAndHashedToken(type: String!, hashedToken: String!): Token
}

type Mutation {
  deleteSessionsByUserId(userId: ID!): Session @resolver(name: "delete_sessions_by_user_id")
  deleteTokensByUserId(userId: ID!): Token @resolver(name: "delete_tokens_by_user_id")
}
